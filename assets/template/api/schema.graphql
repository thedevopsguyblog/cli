#https://docs.aws.amazon.com/appsync/latest/devguide/designing-your-schema.html
schema {
  query: Query
  mutation: Mutation
}

type Request {
	id: ID
	orgid: String!
	requestor: String!
	class: String!
	yeargroup: Int!
	description: String!
	subDate: AWSDateTime!
	status: RequestStatus!
	image: [String]
	location: String!
	assignment: AWSEmail
}

type Organisation {
	admins: [String]
  	orgId: ID!
  	orgName: String!
  	orgAddress: String
  	orgMembers: Int!
  	orgSubPlan: String!
}

type Watchlist @aws_api_key {
	emailaddress: AWSEmail!
	createdAt: AWSDateTime!
	metadata: AWSJSON
}

enum RequestStatus {  
	open
  	assigned
  	rejected
  	closed
}

input UpdateWatchlistInput {
	emailaddress:AWSEmail!
	createdAt: AWSDateTime
	metadata: AWSJSON
}

type RequestsConnection {
	requests: [Request]
	nextToken: String
}

input UpdateRequestInput {
	assignment:AWSEmail!
	status:RequestStatus!
	id:ID!
	orgid:String!
}

input CreateRequestInput {
	id: ID
	requestor: String!
	class: String!
	yeargroup: Int!
	description: String!
	subDate: AWSDateTime!
	location: String
	status: String!
	image: [String]
	orgid: String!
}

type Mutation {
	createRequest(input: CreateRequestInput!): Request @aws_cognito_user_pools
	updateWatchlist(input: UpdateWatchlistInput!): Watchlist @aws_api_key
	updateRequest(input: UpdateRequestInput!): Request @aws_cognito_user_pools 
}

type Query {
	getOrganisationDetails(orgId: String!): Organisation @aws_cognito_user_pools
	getRequestsByUser(requestorEmail: String!, limit: Int, nextToken: String): RequestsConnection @aws_cognito_user_pools
	getRequestsByOrg(orgid: String!, status:RequestStatus!, limit: Int, nextToken: String): RequestsConnection @aws_cognito_user_pools
}